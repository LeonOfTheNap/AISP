


13. Pretpostavka je da postoje funkcije za operacije nad stogom skini i dodaj sa sljedeæim prototipima:

int skini (int *stavka, int stog[], int *vrh)
int dodaj (int stavka, int stog[], int n, int *vrh)

Što æe ispisati sljedeæi program?

#include <stdio.h>
#define MAXSTOG 100
int main() {
   int stog[MAXSTOG],vrh=-1;
   int a=1,b=2,c=3;
   dodaj(a,stog,MAXSTOG,&vrh);
   dodaj(b,stog,MAXSTOG,&vrh);
   dodaj(c,stog,MAXSTOG,&vrh);
   skini(&a,stog,&vrh);
   skini(&c,stog,&vrh);
   skini(&b,stog,&vrh);
   printf("%d %d %d",a,b,c);
}

a) 3 1 2
b) 1 2 3
c) 2 3 1
d) 1 3 2
e) 2 1 3






17. Na stog se pohranjuju samo cijeli brojevi. Prototip funkcije za skidanje cijelog broja sa stoga je (funkcija vraæa 0 ili 1, ovisno o tome da li se zapis uspio skinuti s vrha stoga):

a) int skini(int stavka, int stog[], int *vrhStog);
b) int skini(int *stavka, int stog[], int *vrhStog);
c) int skini(float stavka, float stog[], int vrhStog);
d) void *skini(int *stavka, int stog[], int n, int *vrhStog);
e) int *skini(int *stavka, int stog[], int vrhStog);

18. Koja od sljedeæih nizova naredbi u pseudokodu æe zamijeniti vrijednost varijabli A i B pomoæu stoga:

a) stavi(A); skini(B); stavi(B); skini(A);
b) stavi(B); skini(A);
c) stavi(A); skini(B);
d) stavi(A); stavi(Pom); stavi(B); stavi(Pom); skini(A); stavi(Pom);skini(B);
e) stavi(A); stavi(B); skini(A); skini(B);





26. Koja æe od sljedeæih naredbi pohraniti vrijednost varijable b u varijablu a?

int a = 2, b = 3;

*a) a = *(&b);
b) *a = &b;
c) *a = *b;
d) &a = *b;
e) a == b;




36. Ako imamo cjelobrojni stog i funkciju uzmi koja uzima element sa stoga i ima sljedeæi prototip (funkcija vraæa 1 ako je uspješno skinula element, a 0 ako nije):

int uzmi(int STOG[], int n, int *vrh, int *stavka);

kako bi se napisala funkcija koja raèuna broj elemenata na stogu

a) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(STOG, n, vrh, elem) != 0 ) br++;
         return br;
    }
b) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(STOG, n, vrh, &elem) != 0 ) br++;
         return br;
    }
c) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(STOG, n, *vrh, &elem) != 0 ) br++;
         return br;
    }
d) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(&STOG, n, vrh, &elem) != 0 ) br++;
         return br;
    }
e) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(&STOG[0], n, vrh, elem) != 0 ) br++;
         return br;
    }


37. Složenost funkcije

int dodaj (zapis stavka, zapis stog[], int n, int *vrh) {
    if (*vrh >= n-1) return 0;
   (*vrh)++;                    
   stog [*vrh] = stavka;
   return 1;
}
je:

a) složenost ovisi o velièini zapisa stavke, pa se ne može jednoznaèno odrediti 
b) O(log n)
c) O(log2 n)
d) O(n)
e) O(1) 





39. Koja od sljedeæih tvrdnji vezanih uz stog je istinita?

a) interni stog raèunala koristi se samo pri deklaraciji globalnih varijabli C programa
b) pojedina operacija dodaj (push) i brisi (pop) zahtijeva jednako vremena bez obzira na broj pohranjenih podataka
c) stog je programska struktura u koju se dodaju i brišu elementi po naèelu FIFO (First In First Out)
d) za programsku realizaciju stoga moguæe je iskljuèivo koristiti stog koji je definiran kao polje
e) na stog se mogu pohraniti isljuèivo cjelobrojni (int) podaci




41. Kakav je sadržaj stoga nakon izvoðenja funkcije funkcija, ako je stog prije poziva prazan?
Funkcije za operacije nad stogom skini i dodaj vraæaju 1 ako su obavile traženu zadaæu, a 0 ako nisu, te imaju sljedeæe prototipe:

int skini (int *stavka, int stog[], int *vrh)
int dodaj (int stavka, int stog[], int n, int *vrh)

#include <stdio.h>
#define MAXSTOG 100
void funkcija() {
  int stog[MAXSTOG], pomStog[MAXSTOG];
  int i, vrh = -1, pomVrh = -1;
  while (skini(&i, stog, &vrh)) { 
    if (i>=0) dodaj(i, pomStog, MAXSTOG, &pomVrh); 
  }
  while (skini(&i, pomStog, &pomVrh)) { 
    if (i<0){ 
      dodaj(i, stog, MAXSTOG, &vrh); 
    }
  }
}

a) Stog sadrži samo elemente <=0
b) Stog je prazan
c) Sadržaj stoga je nepoznat
d) Sadržaj stoga je nepromijenjen
e) Stog sadrži samo elemente >0









75. Ako push stavlja na stog i vraca 1 za uspjesno stavljanje a 0 za neuspjesno,
 te pop skida sa stoga i vraca skinuti element za uspjesno skidanje ili -1 za neuspjesno odredi sto ce se nalaziti ne stogu.
 
push(5);
push(push(pop()));
 
RJESENJE: 51




77. Pretpostavka je da postoje funkcije za operacije nad stogom skini i dodaj sa sljedeæim prototipima:
int skini (int *stavka, int stog[], int *vrh)
int dodaj (int stavka, int stog[], int n, int *vrh)


78. Što æe ispisati sljedeæi program? 

#include <stdio.h>
#define MAXSTOG 100
int main() {   
int stog[MAXSTOG],vrh=-1;   
int a=1,b=2,c=3;   
dodaj(a,stog,MAXSTOG,&vrh);   
dodaj(b,stog,MAXSTOG,&vrh);   
dodaj(c,stog,MAXSTOG,&vrh);   

 skini( &a ,stog,&vrh);   
 skini( &c ,stog,&vrh);   
 skini( &b ,stog,&vrh);   

printf("%d %d %d",a,b,c);
}   
*a) 3 1 2            
b) 1 2 3            
c) 2 3 1            
d) 1 3 2            
e) 2 1 3





87. Ako imamo cjelobrojni stog i funkciju uzmi koja uzima element sa stoga i ima sljedeæi prototip 
(funkcija vraæa 1 ako je uspješno skinula element, a 0 ako nije):

int uzmi(int STOG[], int n, int *vrh, int *stavka);

kako bi se napisala funkcija koja raèuna broj elemenata na stogu  

**a) int br_elem( int STOG[], int n, int *vrh)  {        
 int elem, br=0;         
while( uzmi(STOG, n, vrh, elem) != 0 )
 br++;        
 return br;    
}                    
b) int br_elem( int STOG[], int n, int *vrh)  {   
      int elem, br=0;         
while( uzmi(STOG, n, vrh, &elem) != 0 ) 
br++;        
 return br;    
}           
c) int br_elem( int STOG[], int n, int *vrh) {
         int elem, br=0;        
 while( uzmi(STOG, n, *vrh, &elem) != 0 )
 br++;         
return br;    
}            
d) int br_elem( int STOG[], int n, int *vrh)  {     
    int elem, br=0;   
      while( uzmi(&STOG, n, vrh, &elem) != 0 )
 br++;      
   return br;
    }            
e) int br_elem( int STOG[], int n, int *vrh)  {    
   int elem, br=0;        
 while( uzmi(&STOG[0], n, vrh, elem) != 0 ) 
br++;        
 return br;    
}



90. Koja od sljedeæih tvrdnji vezanih uz stog je istinita?  

a) interni stog raèunala koristi se samo pri deklaraciji globalnih varijabli C programa            
*b) pojedina operacija dodaj (push) i brisi (pop) zahtijeva jednako vremena bez obzira na broj pohranjenih podataka           
c) stog je programska struktura u koju se dodaju i brišu elementi po naèelu FIFO (First In First Out)           
d) za programsku realizaciju stoga moguæe je iskljuèivo koristiti stog koji je definiran kao polje            
e) na stog se mogu pohraniti isljuèivo cjelobrojni (int) podaci





92. Kakav je sadržaj stoga nakon izvoðenja funkcije funkcija, ako je stog prije poziva prazan? 
Funkcije za operacije nad stogom skini i dodaj vraæaju 1 ako su obavile traženu zadaæu,
 a 0 ako nisu, te imaju sljedeæe prototipe:

int skini (int *stavka, int stog[], int *vrh)
int dodaj (int stavka, int stog[], int n, int *vrh)
  #include <stdio.h>
  #define MAXSTOG 100 
void funkcija() {
  int stog[MAXSTOG], 
pomStog[MAXSTOG]; 
int i, vrh = -1, pomVrh = -1;  
while (skini(&i, stog, &vrh)) {    
 if (i>=0) dodaj(i, pomStog, MAXSTOG, &pomVrh);   
}  
while (skini(&i, pomStog, &pomVrh)) {    
 if (i<0){       
dodaj(i, stog, MAXSTOG, &vrh);     
} }
} 

a) Stog sadrži samo elemente <=0           
*b) Stog je prazan            
c) Sadržaj stoga je nepoznat           
d) Sadržaj stoga je nepromijenjen           
e) Stog sadrži samo elemente >0




99. Funkcija stavljanja na stog (int(push(int element)) vraæa
1 za uspjeh, 0-neuspjeh, funkcija skidanja (int(pop()) vraæa
vrijednost elementa s vrha ili -1 ako je stog prazan.
Što æe biti?
pop(push(push(pop())) (stog je bio prazan)
Rj: b)-1



Rj: O(n2)


102. Ako imamo cjelobrojni stog i funkciju koja uzima element sa stoga:
    int uzmi(int stog[], int n, int *vrh, int *stavka);
koja vraæa 1 za uspjeh inaæe 0.
Kako bi se napisala funkcija koja vraèa broj el. na stogu?

Rj:
   int br_elem(int stog[], int n, int *vrh){
     int elem_br=0;
     while(uzmi(stog, n, vrh, &elem)!=0) br ++;
   }
   return br;


103.
Na stog se pohranjuju samo cijeli brojevi. Prototip funkcije za stavljanje
cijelog broja na stog je (funkcija vraæa 0 ili 1 ovisno o tome da li se zapis
uspio pohraniti na vrh stoga):

a)int dodaj(int stavka, int stog[], int n, int VrhStog);
b)int dodaj(float stavka, float stog[], int n, int VrhStog);
c)void dodaj(int stavka, int stog[], int n, int *VrhStog);
*d)int dodaj(int stavka, int stog[], int n, int *VrhStog);
e)int *dodaj(int *stavka, int stog[], int n, int VrhStog);




107.
Za stog realiziran cjelobrojnim poljem postoje funkcije push i pull koje
stavljaju, odnosno uzimaju element sa stoga. Ukoliko je vrh stoga na lijevoj
strani, što æe se nalaziti na stogu nakon izvršavanja sljedeæeg programgskog
odsjeèka (na poèetku je stog prazan):

 for(i=1;i<=10;i++)
  push(i);
 for(j=1;j<=5;j++)
  pull();

*a) 6 7 8 9 10
b) 1 2 3 4 5
c) 1
d) 1 2 3 4 5 6 7 8 9 10
e) neæe biti više elemenata na stogu



     

112. Ako fukcija stavljanja na stog vraŠa 1 u sluÀaju uspjeha a 0 u sluÀaju neuspjeha i ima prototip 

  int push (int element); 

a funkcija skidanja sa stoga vraŠa vrijednost element s vrha ili -1 ako je stog prazan i ima prototip 

  int pop ();

Üto Še biti na stogu nakon obavljanja sljedeŠih naredbi, uz pretpostavku da je stog bio prazan i da stog raste s lijeva na desno:

    push(push(pop()));
    pop();

a) Stog Še biti prazan.
b) -1 0
c) 1 
*d) -1
e) 1 -1
   
  


114. Stog je struktura za koju vrijedi:

*a) Da bi pristupili elementu s dna stoga, potrebno je sve ostale skinuti.
b) Zadnji element koji smo stavili na stog zadnjega Šemo i skinuti
c) OmoguŠava direktan pristup svakom upisanom elementu
d) FIFO
e) NiÜta od navedenog
     




116. Ako imamo cjelobrojni stog i funkciju uzmi koja uzima element sa stoga i ima sljedeŠi prototip (funkcija vraŠa 1 ako je uspjeÜno skinula element, a 0 ako nije):

int uzmi(int STOG[], int n, int *vrh, int *stavka);

kako bi se napisala funkcija koja raÀuna broj elemenata na stogu

a) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(&STOG, n, vrh, &elem) != 0 ) br++;
         return br;
    }
*b) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(STOG, n, vrh, &elem) != 0 ) br++;
         return br;
    }
c) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(&STOG[0], n, vrh, elem) != 0 ) br++;
         return br;
    }
d) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(STOG, n, *vrh, &elem) != 0 ) br++;
         return br;
    }
e) int br_elem( int STOG[], int n, int *vrh)  {
         int elem, br=0;
         while( uzmi(STOG, n, vrh, elem) != 0 ) br++;
         return br;
    }

         



119. Ako push stavlja na stog i vraca 1 za uspjesno stavljanje a 0 za neuspjesno, te pop skida sa stoga i vraca skinuti element za uspjesno skidanje ili -1 za neuspjesno odredi sto ce se nalaziti ne stogu.
 
push(5);
push(push(pop()));
 
RJESENJE: 51
 

120. Ako push stavlja na stog i vraca 1 za uspjesno stavljanje te 0 za neuspjesno, a pull skida sa stoga i vraca vrijednost skinutog elementa te se uzima da ne postoji slucaj da pull ne uspije skinuti sa stoga odredi sto ce se nalaziti na stogu.
 
push(push(push(5))+pull());



 



122. Pretpostavka je da postoje funkcije za operacije nad stogom skini i dodaj sa sljedeæim prototipima:
int skini (int *stavka, int stog[], int *vrh)
int dodaj (int stavka, int stog[], int n, int *vrh)

Što æe ispisati sljedeæi program? 
#include <stdio.h>
#define MAXSTOG 100 
int main() {   
int stog[MAXSTOG],vrh=-1;   
int a=1,b=2,c=3;   
dodaj(a,stog,MAXSTOG,&vrh);  
 dodaj(b,stog,MAXSTOG,&vrh);   
dodaj(c,stog,MAXSTOG,&vrh);   
skini(&a,stog,&vrh);   
skini(&c,stog,&vrh);   
skini(&b,stog,&vrh);   
printf("%d %d %d",a,b,c);}   
*a) 3 1 2            
b) 1 2 3            
c) 2 3 1            
d) 1 3 2            
e) 2 1 3



126. Na stog se pohranjuju samo cijeli brojevi. Prototip funkcije za skidanje cijelog broja sa stoga je 
(funkcija vraæa 0 ili 1, ovisno o tome da li se zapis uspio skinuti s vrha stoga):  


a) int skini(int stavka, int stog[], int *vrhStog);            
*b) int skini(int *stavka, int stog[], int *vrhStog);           
c) int skini(float stavka, float stog[], int vrhStog);            
d) void *skini(int *stavka, int stog[], int n, int *vrhStog);            
e) int *skini(int *stavka, int stog[], int vrhStog);           


127. Koja od sljedeæih nizova naredbi u pseudokodu æe zamijeniti vrijednost varijabli A i B pomoæu stoga: 
a) stavi(A); skini(B); stavi(B); skini(A);           
b) stavi(B); skini(A);            
c) stavi(A); skini(B);            
d) stavi(A); stavi(Pom); stavi(B); stavi(Pom); skini(A); stavi(Pom);skini(B);            
*e) stavi(A); stavi(B); skini(A); skini(B);                   



